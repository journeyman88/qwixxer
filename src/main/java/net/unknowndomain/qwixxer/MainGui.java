/*
 * Copyright 2018 Marco Bignami.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.unknowndomain.qwixxer;

import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.SAVE_DIALOG;
import net.unknowndomain.qwixxer.sequencers.ColorRandomSequencer;
import net.unknowndomain.qwixxer.sequencers.FullRandomSequencer;
import net.unknowndomain.qwixxer.sequencers.OrderRandomSequencer;
import net.unknowndomain.qwixxer.sequencers.Sequencer;
import org.apache.commons.io.FilenameUtils;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPageable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author journeyman
 */
public class MainGui extends javax.swing.JFrame {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(MainGui.class);

    /**
     * Creates new form MainGui
     */
    public MainGui() {
        initComponents();
        fileSaver = new JFileChooser();
        fileSaver.setDialogType(SAVE_DIALOG);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        endsCheckbox = new javax.swing.JCheckBox();
        sequencerCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        sheetNumberField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        pdfButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/unknowndomain/qwixxer/locale/Language"); // NOI18N
        endsCheckbox.setText(bundle.getString("interface.labels.defineends")); // NOI18N
        endsCheckbox.setToolTipText(bundle.getString("interface.tooltips.defineends")); // NOI18N

        sequencerCombo.setModel(getAvailableSequencers(bundle));
        sequencerCombo.setToolTipText(bundle.getString("interface.tooltips.comboSequencer")); // NOI18N

        jLabel1.setText(bundle.getString("interface.labels.generator")); // NOI18N

        sheetNumberField.setText("10");
        sheetNumberField.setToolTipText(bundle.getString("interface.tooltips.scoresheetNum")); // NOI18N

        jLabel2.setText(bundle.getString("interface.labels.scoresheetNum")); // NOI18N

        printButton.setText(bundle.getString("interface.labels.printButton")); // NOI18N
        printButton.setToolTipText(bundle.getString("interface.tooltips.printButton")); // NOI18N
        printButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printButtonMouseClicked(evt);
            }
        });

        pdfButton.setText(bundle.getString("interface.labels.pdfButton")); // NOI18N
        pdfButton.setToolTipText(bundle.getString("interface.tooltips.pdfButton")); // NOI18N
        pdfButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pdfButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(printButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pdfButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sequencerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sheetNumberField)
                            .addComponent(endsCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sequencerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endsCheckbox)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sheetNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printButton)
                    .addComponent(pdfButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printButtonMouseClicked
        this.setLocked(true);
        try {
            File tmp = File.createTempFile("qwixxer", "pdf");
            Generator.generatePdfFile(getSequencer(), getRandomEnd(), getScoresheetNumber(), tmp);
            printPdfFile(tmp);
            tmp.deleteOnExit();
        } catch (IOException ex) {
            LOGGER.error(null, ex);
        }
        this.setLocked(true);
    }//GEN-LAST:event_printButtonMouseClicked

    private void pdfButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pdfButtonMouseClicked
        this.setLocked(true);
        try {
            int selected = fileSaver.showSaveDialog(null);
            if (selected == APPROVE_OPTION)
            {
                File file = fileSaver.getSelectedFile();
                if (!FilenameUtils.getExtension(file.getName()).equalsIgnoreCase("pdf")) {
                    file = new File(file.toString() + ".pdf");  // append .xml if "foo.jpg.xml" is OK
                    file = new File(file.getParentFile(), FilenameUtils.getBaseName(file.getName())+".pdf"); // ALTERNATIVELY: remove the extension (if any) and replace it with ".xml"
                }
                file.createNewFile();
                Generator.generatePdfFile(getSequencer(), getRandomEnd(), getScoresheetNumber(), file);
            }
        } catch (IOException ex) {
            LOGGER.error(null, ex);
        }
        this.setLocked(false);
    }//GEN-LAST:event_pdfButtonMouseClicked

    private Sequencer getSequencer()
    {
        Sequencer retVal = null;
        switch(sequencerCombo.getSelectedIndex())
        {
            case 0:
                retVal = new ColorRandomSequencer();
                break;
            case 1:
                retVal = new OrderRandomSequencer();
                break;
            case 2:
                retVal = new FullRandomSequencer();
                break;
        }
        return retVal;
    }
    
    private int getScoresheetNumber()
    {
        int retVal;
        String number = sheetNumberField.getText();
        try {
            retVal = Integer.parseInt(number);
        } catch (NumberFormatException ex) {
            LOGGER.error("Inserito valore non numerico");
            retVal = 0;
        }
        return retVal;
    }
    
    private boolean getRandomEnd()
    {
        return !endsCheckbox.isSelected();
    }
    
    private void printPdfFile(File toPrint)
    {
        try (PDDocument document = PDDocument.load(toPrint)) {
            
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPageable(new PDFPageable(document));
            if (job.printDialog()) {
                job.print();
            }
        } catch (IOException | PrinterException ex) {
            LOGGER.error("Errore in stampa",ex);
        }
    }
    
    private void setLocked(boolean locked)
    {
        sequencerCombo.setEnabled(!locked);
        endsCheckbox.setEnabled(!locked);
        sheetNumberField.setEnabled(!locked);
        printButton.setEnabled(!locked);
        pdfButton.setEnabled(!locked);
    }
    
    public static void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOGGER.error(null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainGui gui = new MainGui();
            gui.setTitle("Qwixxer");
            gui.setVisible(true);
        });
    }
    
    
    
    private static ComboBoxModel<SequencerSelector> getAvailableSequencers(java.util.ResourceBundle bundle)
    {
        Vector<SequencerSelector> backing = new Vector<>();
        for (Sequencer.Available s : Sequencer.Available.values())
        {
            backing.add(new SequencerSelector(s, bundle.getString(s.getBundleKey())));
        }
        ComboBoxModel<SequencerSelector> retVal = new javax.swing.DefaultComboBoxModel<>(backing);
        return retVal;
    }
    
    private static class SequencerSelector {
        private final Sequencer.Available sequencer;
        private final String label;
        
        public SequencerSelector(Sequencer.Available sequencer, String label)
        {
            this.sequencer = sequencer;
            this.label = label;
        }
        
        public Sequencer.Available getSequencer() {
            return sequencer;
        }
        
        @Override
        public String toString() {
            return label;
        }
    }
    
    private final javax.swing.JFileChooser fileSaver;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox endsCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton pdfButton;
    private javax.swing.JButton printButton;
    private javax.swing.JComboBox<SequencerSelector> sequencerCombo;
    private javax.swing.JTextField sheetNumberField;
    // End of variables declaration//GEN-END:variables
}
